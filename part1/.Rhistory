title(main="Returns with 1% VaR Limits")
legend("topright", legend=c("skewed t-GARCH","skewed t-EWMA","skewed t-APARCH"), col=c("red","blue","darkgreen"), lty=1)
start = ymd(20080601)
end = ymd(20100601)
ylim = NULL
plot.VaR(GARCH, start=start, end=end, col="red", ylim=ylim)
par(new=T)
plot.VaR(tGARCH11, start=start, end=end, col="blue", ylim=ylim)
par(new=T)
plot.VaR(stGARCH11, start=start, end=end, col="darkgreen", ylim=ylim)
title(main="Returns with 1% VaR Limits")
legend("topright", legend=c("GARCH","t-GARCH","skewed t-GARCH"), col=c("red","blue","darkgreen"), lty=1)
ylim = c(-0.2,0.28)
plot.VaR(stGARCH11, start=start, end=end, col="red", ylim=ylim)
par(new=T)
plot.VaR(stEWMA, start=start, end=end, col="blue", ylim=ylim)
par(new=T)
plot.VaR(stapARCH, start=start, end=end, col="darkgreen", ylim=ylim)
abline(h=0.05)
abline(h=-0.05)
title(main="Returns with 1% VaR Limits")
legend("topright", legend=c("skewed t-GARCH","skewed t-EWMA","skewed t-APARCH"), col=c("red","blue","darkgreen"), lty=1)
start = NULL
end = NULL
ylim = NULL
plot.VaR(GARCH, start=start, end=end, col="red", ylim=ylim)
par(new=T)
plot.VaR(tGARCH11, start=start, end=end, col="blue", ylim=ylim)
par(new=T)
plot.VaR(stGARCH11, start=start, end=end, col="darkgreen", ylim=ylim)
title(main="Returns with 1% VaR Limits")
legend("topright", legend=c("GARCH","t-GARCH","skewed t-GARCH"), col=c("red","blue","darkgreen"), lty=1)
start = ymd(20080601)
end = ymd(20100601)
ylim = NULL
plot.VaR(GARCH, start=start, end=end, col="red", ylim=ylim)
par(new=T)
plot.VaR(tGARCH11, start=start, end=end, col="blue", ylim=ylim)
par(new=T)
plot.VaR(stGARCH11, start=start, end=end, col="darkgreen", ylim=ylim)
title(main="Returns with 1% VaR Limits")
legend("topright", legend=c("GARCH","t-GARCH","skewed t-GARCH"), col=c("red","blue","darkgreen"), lty=1)
start = ymd(20080601)
end = ymd(20100601)
ylim = NULL
plot.VaR(GARCH, start=start, end=end, col="red", ylim=ylim)
par(new=T)
plot.VaR(tGARCH11, start=start, end=end, col="blue", ylim=ylim)
par(new=T)
plot.VaR(stGARCH11, start=start, end=end, col="darkgreen", ylim=ylim)
title(main="Returns with 1% VaR Limits")
legend("topright", legend=c("GARCH","t-GARCH","skewed t-GARCH"), col=c("red","blue","darkgreen"), lty=1)
ylim = c(-0.2,0.28)
plot.VaR(stGARCH11, start=start, end=end, col="red", ylim=ylim)
par(new=T)
plot.VaR(stEWMA, start=start, end=end, col="blue", ylim=ylim)
par(new=T)
plot.VaR(stapARCH, start=start, end=end, col="darkgreen", ylim=ylim)
abline(h=0.05)
abline(h=-0.05)
title(main="Returns with 1% VaR Limits")
legend("topright", legend=c("skewed t-GARCH","skewed t-EWMA","skewed t-APARCH"), col=c("red","blue","darkgreen"), lty=1)
start = ymd(20080601)
end = ymd(20100601)
ylim = NULL
plot.VaR(GARCH, start=start, end=end, col="red", ylim=ylim)
par(new=T)
plot.VaR(tGARCH11, start=start, end=end, col="blue", ylim=ylim)
par(new=T)
plot.VaR(stGARCH11, start=start, end=end, col="darkgreen", ylim=ylim)
title(main="Returns with 1% VaR Limits")
legend("topright", legend=c("GARCH","t-GARCH","skewed t-GARCH"), col=c("red","blue","darkgreen"), lty=1)
ylim = c(-0.2,0.28)
plot.VaR(stGARCH11, start=start, end=end, col="red", ylim=ylim)
par(new=T)
plot.VaR(stEWMA, start=start, end=end, col="blue", ylim=ylim)
par(new=T)
plot.VaR(stapARCH, start=start, end=end, col="darkgreen", ylim=ylim)
abline(h=0.05)
abline(h=-0.05)
title(main="Returns with 1% VaR Limits")
legend("topright", legend=c("skewed t-GARCH","skewed t-EWMA","skewed t-APARCH"), col=c("red","blue","darkgreen"), lty=1)
data$PRC[1]/data$PRC[nrow(data)]
data$PRC[nrow(data)] / data$PRC[1]
sp500$PRC[nrow(data)] / sp500$PRC[1]
sp500$spindex[nrow(sp500)] / sp500$spindex[1]
sp500$spindx[nrow(sp500)] / sp500$spindx[1]
basicStats(sp500$sprtrn)
basicStats(y)
basicStats(sp500$sprtrn)
basicStats(y)
basicStats(y)
basicStats(sp500$sprtrn)
show(GARCH110)
spec = ugarchspec(variance.model=list(garchOrder=c(1,5)),mean.model=list(armaOrder=c(0,0)))
GARCH110 = ugarchfit(spec = spec, data = yz, solver="hybrid")
show(GARCH110)
spec = ugarchspec(variance.model=list(garchOrder=c(1,6)),mean.model=list(armaOrder=c(0,0)))
GARCH110 = ugarchfit(spec = spec, data = yz, solver="hybrid")
show(GARCH110)
spec = ugarchspec(variance.model=list(garchOrder=c(1,2)),mean.model=list(armaOrder=c(0,0)))
GARCH110 = ugarchfit(spec = spec, data = yz, solver="hybrid")
GARCH110 = ugarchfit(spec = spec, data = yz, solver="hybrid")
show(GARCH110)
lrtest(tGARCH11, stGARCH11)
cat("\naccuracy----------------------\n")
#' @title: general performance
perf = function(prob, y, ...){
pred_test <- rep("no", length(y))
pred_test[prob > .5] = "yes"
mat <- table(pred_test, y_test)
cat("\nconfusion matrix----------------------\n")
print( mat )
cat("\naccuracy----------------------\n")
print( mean(pred_test==y_test) )
cat("\nrecall----------------------\n")
print( mat[2,2]/sum(mat[,2]) )
pred_glm <- prediction(prob, y)
cat("\nAUC----------------------\n")
print( performance(pred_glm, "auc")@y.values[[1]] )
#ROC
perf_glm <- performance(pred_glm, measure = "tpr", x.measure = "fpr")
plot(perf_glm, ...)
abline(0, 1, col="grey", lty=2)
}
bank_df<-read.csv("bank-additional-full.csv",sep=";",dec=".")
############################################################################################
###1.READ AND CLEAN DATA
############################################################################################
setwd("/Users/Bowen.Deng/Desktop/LSE/ST443/group_project/ST443/part1")
bank_df<-read.csv("bank-additional-full.csv",sep=";",dec=".")
bank_df$pdays = 1/(1+bank_df$pdays)
# bank_df$pdays[bank_df$pdays==999]=-1  #999 means no previous contact,would make other value useless
bank_df<- bank_df[,which(colnames(bank_df)!= "duration")]
RNGkind(sample.kind = "Rounding")
set.seed(1)
train<- sample(x=dim(bank_df)[1], size=dim(bank_df)[1]*2/3)
#standardize the numerical variables
numBank<- bank_df[,c(1,11:13,15:19)] #numercial column
catBank<- bank_df[,-c(1,11:13,15:19,20)] #categorcial column
scale<-apply(numBank[train,], 2, sd)
center<-apply(numBank[train,], 2, mean)
center["campaign"]<- 1
center["previous"]<- 0
tmp <- scale(numBank,center = center,scale = scale) #scale
tmp <- cbind(tmp, catBank, y=bank_df$y) # bind y
tmp <- model.matrix(y~., data = tmp)[,-1] # design matrix
round(cor(tmp),3)
table(bank_df[bank_df$loan=="unknown",]==bank_df[bank_df$housing=="unknown",]) ##"all  true" indicates that the clients whose condition of
bank <- cbind(data.frame(tmp[,which(colnames(tmp)!="loanunknown")]), y=bank_df$y)
## 1. Generate the training and testing datasets
###########################################################
# Create testing and training data set
bank_test = bank[-train,]
bank_train = bank[train,]
# Create testing data for Y
y_test = bank$y[-train]
# resampleing to get data with balanced y
bank_train_yes<- bank_train[bank_train$y=="yes",]
set.seed(2)
resample_idx<- sample(nrow(bank_train_yes),sum(bank_train$y=="no"),replace = T)
bank_train_res<- rbind(bank_train[bank_train$y=="no",],bank_train_yes[resample_idx,]) #resampled training data
#Using resampled dataset
glm_fit_res <- glm(y~., data = bank_train_res, family = "binomial")
prob_test <- predict(glm_fit_res, bank_test, type = "response")
perf(prob_test, bank_test$y)
library(ROCR)
prob_test <- predict(glm_fit_res, bank_test, type = "response")
perf(prob_test, bank_test$y)
#10-fold cross validation for to determine the optimal tuning parameter
set.seed(980608)
cv.lasso <-cv.glmnet(as.matrix(bank_train_df[,-ncol(bank_train_res)]), bank_train_df$y
, family = "binomial")
library(glmnet)
# Detecting outliers by calculating cook's distance
cooksd<-cooks.distance(glm_fit_res)
# Remove the outliers from the training dataset
tmp <- cbind(bank_train_res,cooksd)
bank_train_df<- tmp[tmp$cooksd< 8/(dim(bank_train_res)[1]-2*53),-dim(tmp)[2]] #exclude the outliers
nrow(bank_train_res)-nrow(bank_train_df)
#10-fold cross validation for to determine the optimal tuning parameter
set.seed(980608)
cv.lasso <-cv.glmnet(as.matrix(bank_train_df[,-ncol(bank_train_res)]), bank_train_df$y
, family = "binomial")
plot(cv.lasso)
col_lasso = rownames(coef(cv.lasso))[which(coef(cv.lasso)!=0)][-1]
col_lasso = append(col_lasso, "y")
# fit a new LR model
lr_lasso <- glm(y ~ ., data = bank_train_df[,col_lasso], family = "binomial")
prob_test <- predict(lr_lasso, newdata = bank_test[,col_lasso], type = "response")
perf(prob_test, bank_test$y)
# Final Model ############################################################
C = summary(lr_lasso)$coefficient
C[C[,"Pr(>|z|)"]<0.05 & abs(C[,"Estimate"])>0.2, ]
C
nrow(C)
nrow(C)-1
plot(cv.lasso)
#10-fold cross validation for to determine the optimal tuning parameter
set.seed(980608)
# cv.lasso <-cv.glmnet(as.matrix(bank_train_df[,-ncol(bank_train_res)]), bank_train_df$y
#                      , family = "binomial")
cv.lasso <-cv.glmnet(as.matrix(bank_train_df[,-ncol(bank_train_res)]), bank_train_df$y
, family = "binomial", type.measure = "class")
plot(cv.lasso)
col_lasso = rownames(coef(cv.lasso))[which(coef(cv.lasso)!=0)][-1]
col_lasso = append(col_lasso, "y")
# fit a new LR model
lr_lasso <- glm(y ~ ., data = bank_train_df[,col_lasso], family = "binomial")
prob_test <- predict(lr_lasso, newdata = bank_test[,col_lasso], type = "response")
perf(prob_test, bank_test$y)
length(col_lasso)
# cv.lasso <-cv.glmnet(as.matrix(bank_train_df[,-ncol(bank_train_res)]), bank_train_df$y
#                      , family = "binomial")
cv.lasso <-cv.glmnet(as.matrix(bank_train_df[,-ncol(bank_train_res)]), bank_train_df$y
, family = "binomial", type.measure = "mse")
plot(cv.lasso)
col_lasso = rownames(coef(cv.lasso))[which(coef(cv.lasso)!=0)][-1]
length(col_lasso)
col_lasso = append(col_lasso, "y")
# fit a new LR model
lr_lasso <- glm(y ~ ., data = bank_train_df[,col_lasso], family = "binomial")
prob_test <- predict(lr_lasso, newdata = bank_test[,col_lasso], type = "response")
perf(prob_test, bank_test$y)
# cv.lasso <-cv.glmnet(as.matrix(bank_train_df[,-ncol(bank_train_res)]), bank_train_df$y
#                      , family = "binomial")
cv.lasso <-cv.glmnet(as.matrix(bank_train_df[,-ncol(bank_train_res)]), bank_train_df$y
, family = "binomial", type.measure = "auc")
plot(cv.lasso)
plot(cv.lasso, ylim=c(0.7,1))
col_lasso = rownames(coef(cv.lasso))[which(coef(cv.lasso)!=0)][-1]
length(col_lasso)
col_lasso = append(col_lasso, "y")
# fit a new LR model
lr_lasso <- glm(y ~ ., data = bank_train_df[,col_lasso], family = "binomial")
prob_test <- predict(lr_lasso, newdata = bank_test[,col_lasso], type = "response")
perf(prob_test, bank_test$y)
plot(cv.lasso, ylim=c(0.7,1))
plot(cv.lasso, ylim=c(0.7,0.85))
plot(cv.lasso, ylim=c(0.7,0.8))
plot(cv.lasso, ylim=c(0.7,0.82))
plot(cv.lasso, ylim=c(0.78,0.83))
plot(cv.lasso, ylim=c(0.8,0.83))
plot(cv.lasso, ylim=c(0.8,0.82))
#10-fold cross validation for to determine the optimal tuning parameter
set.seed(980608)
# cv.lasso <-cv.glmnet(as.matrix(bank_train_df[,-ncol(bank_train_res)]), bank_train_df$y
#                      , family = "binomial")
cv.lasso <-cv.glmnet(as.matrix(bank_train_df[,-ncol(bank_train_res)]), bank_train_df$y
, family = "binomial", type.measure = "auc")
plot(cv.lasso, ylim=c(0.8,0.82))
col_lasso = rownames(coef(cv.lasso))[which(coef(cv.lasso)!=0)][-1]
length(col_lasso)
col_lasso = append(col_lasso, "y")
# fit a new LR model
lr_lasso <- glm(y ~ ., data = bank_train_df[,col_lasso], family = "binomial")
prob_test <- predict(lr_lasso, newdata = bank_test[,col_lasso], type = "response")
perf(prob_test, bank_test$y)
#10-fold cross validation for to determine the optimal tuning parameter
set.seed(123)
# cv.lasso <-cv.glmnet(as.matrix(bank_train_df[,-ncol(bank_train_res)]), bank_train_df$y
#                      , family = "binomial")
cv.lasso <-cv.glmnet(as.matrix(bank_train_df[,-ncol(bank_train_res)]), bank_train_df$y
, family = "binomial", type.measure = "auc")
plot(cv.lasso, ylim=c(0.8,0.82))
col_lasso = rownames(coef(cv.lasso))[which(coef(cv.lasso)!=0)][-1]
length(col_lasso)
col_lasso = append(col_lasso, "y")
# fit a new LR model
lr_lasso <- glm(y ~ ., data = bank_train_df[,col_lasso], family = "binomial")
prob_test <- predict(lr_lasso, newdata = bank_test[,col_lasso], type = "response")
perf(prob_test, bank_test$y)
#10-fold cross validation for to determine the optimal tuning parameter
set.seed(1)
# cv.lasso <-cv.glmnet(as.matrix(bank_train_df[,-ncol(bank_train_res)]), bank_train_df$y
#                      , family = "binomial")
cv.lasso <-cv.glmnet(as.matrix(bank_train_df[,-ncol(bank_train_res)]), bank_train_df$y
, family = "binomial", type.measure = "auc")
plot(cv.lasso, ylim=c(0.8,0.82))
col_lasso = rownames(coef(cv.lasso))[which(coef(cv.lasso)!=0)][-1]
length(col_lasso)
col_lasso = append(col_lasso, "y")
# fit a new LR model
lr_lasso <- glm(y ~ ., data = bank_train_df[,col_lasso], family = "binomial")
prob_test <- predict(lr_lasso, newdata = bank_test[,col_lasso], type = "response")
perf(prob_test, bank_test$y)
#10-fold cross validation for to determine the optimal tuning parameter
set.seed(2)
# cv.lasso <-cv.glmnet(as.matrix(bank_train_df[,-ncol(bank_train_res)]), bank_train_df$y
#                      , family = "binomial")
cv.lasso <-cv.glmnet(as.matrix(bank_train_df[,-ncol(bank_train_res)]), bank_train_df$y
, family = "binomial", type.measure = "auc")
plot(cv.lasso, ylim=c(0.8,0.82))
col_lasso = rownames(coef(cv.lasso))[which(coef(cv.lasso)!=0)][-1]
length(col_lasso)
col_lasso = append(col_lasso, "y")
# fit a new LR model
lr_lasso <- glm(y ~ ., data = bank_train_df[,col_lasso], family = "binomial")
prob_test <- predict(lr_lasso, newdata = bank_test[,col_lasso], type = "response")
perf(prob_test, bank_test$y)
plot(cv.lasso, ylim=c(0.8,0.82))
col_lasso = rownames(coef(cv.lasso))[which(coef(cv.lasso)!=0)][-1]
length(col_lasso)
col_lasso = append(col_lasso, "y")
prob_test <- predict(lr_lasso, newdata = bank_test[,col_lasso], type = "response")
perf(prob_test, bank_test$y)
library(glmnetUtils)
set.seed(2)
cv.lasso <-cv.glmnet(y ~ .
+ I(age^2)
+ I(campaign^2)
+ I(pdays^2)
+ I(previous^2)
+ I(emp.var.rate^2)
+ I(cons.price.idx^2)
+ I(cons.conf.idx^2)
+ I(euribor3m^2)
+ I(nr.employed^2)
, data = bank_train_df, family = "binomial", type.measure = "auc")
cv.poly <-cv.glmnet(y ~ .
+ I(age^2)
+ I(campaign^2)
+ I(pdays^2)
+ I(previous^2)
+ I(emp.var.rate^2)
+ I(cons.price.idx^2)
+ I(cons.conf.idx^2)
+ I(euribor3m^2)
+ I(nr.employed^2)
, data = bank_train_df, family = "binomial", type.measure = "auc")
plot(cv.poly, ylim=c(0.8,0.82))
col_poly_lasso = rownames(coef(cv.poly))[which(coef(cv.poly)!=0)][-1]
length(col_poly_lasso)
( formula = paste("y~", paste(col_poly_lasso, collapse = "+") ) )
lr_poly_lasso <- glm(formula, data = bank_train_df, family = "binomial")
prob_test <- predict(lr_poly_lasso, newdata = bank_test, type = "response")
perf(prob_test, bank_test$y, col="red")
set.seed(1)
cv.poly <-cv.glmnet(y ~ .
+ I(age^2)
+ I(campaign^2)
+ I(pdays^2)
+ I(previous^2)
+ I(emp.var.rate^2)
+ I(cons.price.idx^2)
+ I(cons.conf.idx^2)
+ I(euribor3m^2)
+ I(nr.employed^2)
, data = bank_train_df, nfolds = 5
,family = "binomial", type.measure = "auc")
plot(cv.poly, ylim=c(0.8,0.82))
col_poly_lasso = rownames(coef(cv.poly))[which(coef(cv.poly)!=0)][-1]
length(col_poly_lasso)
( formula = paste("y~", paste(col_poly_lasso, collapse = "+") ) )
lr_poly_lasso <- glm(formula, data = bank_train_df, family = "binomial")
prob_test <- predict(lr_poly_lasso, newdata = bank_test, type = "response")
perf(prob_test, bank_test$y, col="red")
# 5-fold cross validation for to determine the optimal tuning parameter
set.seed(2)
cv.lasso <-cv.glmnet(as.matrix(bank_train_df[,-ncol(bank_train_res)]), bank_train_df$y
, nfolds = 5, family = "binomial", type.measure = "auc")
plot(cv.lasso, ylim=c(0.8,0.82))
col_lasso = rownames(coef(cv.lasso))[which(coef(cv.lasso)!=0)][-1]
length(col_lasso)
col_lasso = append(col_lasso, "y")
# fit a new LR model
lr_lasso <- glm(y ~ ., data = bank_train_df[,col_lasso], family = "binomial")
prob_test <- predict(lr_lasso, newdata = bank_test[,col_lasso], type = "response")
perf(prob_test, bank_test$y)
set.seed(2)
cv.poly <-cv.glmnet(y ~ .
+ I(age^2)
+ I(campaign^2)
+ I(pdays^2)
+ I(previous^2)
+ I(emp.var.rate^2)
+ I(cons.price.idx^2)
+ I(cons.conf.idx^2)
+ I(euribor3m^2)
+ I(nr.employed^2)
, data = bank_train_df, nfolds = 5
,family = "binomial", type.measure = "auc")
plot(cv.poly, ylim=c(0.8,0.82))
plot(cv.poly, ylim=c(0.8,0.82))
col_poly_lasso = rownames(coef(cv.poly))[which(coef(cv.poly)!=0)][-1]
length(col_poly_lasso)
( formula = paste("y~", paste(col_poly_lasso, collapse = "+") ) )
lr_poly_lasso <- glm(formula, data = bank_train_df, family = "binomial")
prob_test <- predict(lr_poly_lasso, newdata = bank_test, type = "response")
perf(prob_test, bank_test$y, col="red")
set.seed(1)
cv.poly <-cv.glmnet(y ~ .
+ I(age^2)
+ I(campaign^2)
+ I(pdays^2)
+ I(previous^2)
+ I(emp.var.rate^2)
+ I(cons.price.idx^2)
+ I(cons.conf.idx^2)
+ I(euribor3m^2)
+ I(nr.employed^2)
, data = bank_train_df, nfolds = 5
,family = "binomial", type.measure = "auc")
plot(cv.poly, ylim=c(0.8,0.82))
col_poly_lasso = rownames(coef(cv.poly))[which(coef(cv.poly)!=0)][-1]
length(col_poly_lasso)
( formula = paste("y~", paste(col_poly_lasso, collapse = "+") ) )
lr_poly_lasso <- glm(formula, data = bank_train_df, family = "binomial")
prob_test <- predict(lr_poly_lasso, newdata = bank_test, type = "response")
perf(prob_test, bank_test$y, col="red")
set.seed(3)
cv.poly <-cv.glmnet(y ~ .
+ I(age^2)
+ I(campaign^2)
+ I(pdays^2)
+ I(previous^2)
+ I(emp.var.rate^2)
+ I(cons.price.idx^2)
+ I(cons.conf.idx^2)
+ I(euribor3m^2)
+ I(nr.employed^2)
, data = bank_train_df, nfolds = 5
,family = "binomial", type.measure = "auc")
plot(cv.poly, ylim=c(0.8,0.82))
col_poly_lasso = rownames(coef(cv.poly))[which(coef(cv.poly)!=0)][-1]
length(col_poly_lasso)
( formula = paste("y~", paste(col_poly_lasso, collapse = "+") ) )
lr_poly_lasso <- glm(formula, data = bank_train_df, family = "binomial")
prob_test <- predict(lr_poly_lasso, newdata = bank_test, type = "response")
perf(prob_test, bank_test$y, col="red")
cv.poly <-cv.glmnet(y ~ .
+ I(age^2)
+ I(campaign^2)
+ I(pdays^2)
+ I(previous^2)
+ I(emp.var.rate^2)
+ I(cons.price.idx^2)
+ I(cons.conf.idx^2)
+ I(euribor3m^2)
+ I(nr.employed^2)
, data = bank_train_df, nfolds = 5
,family = "binomial", type.measure = "class")
set.seed(3)
cv.poly <-cv.glmnet(y ~ .
+ I(age^2)
+ I(campaign^2)
+ I(pdays^2)
+ I(previous^2)
+ I(emp.var.rate^2)
+ I(cons.price.idx^2)
+ I(cons.conf.idx^2)
+ I(euribor3m^2)
+ I(nr.employed^2)
, data = bank_train_df, nfolds = 5
,family = "binomial", type.measure = "class")
plot(cv.poly, ylim=NULL)
plot(cv.poly, ylim=c(0, 0.25))
plot(cv.poly, ylim=c(0.23, 0.25))
plot(cv.poly, ylim=c(0.23, 0.26))
plot(cv.poly, ylim=c(0.24, 0.26))
col_poly_lasso = rownames(coef(cv.poly))[which(coef(cv.poly)!=0)][-1]
length(col_poly_lasso)
( formula = paste("y~", paste(col_poly_lasso, collapse = "+") ) )
lr_poly_lasso <- glm(formula, data = bank_train_df, family = "binomial")
prob_test <- predict(lr_poly_lasso, newdata = bank_test, type = "response")
perf(prob_test, bank_test$y, col="red")
# 5-fold cross validation for to determine the optimal tuning parameter
# set.seed(2)
# cv.lasso <-cv.glmnet(as.matrix(bank_train_df[,-ncol(bank_train_res)]), bank_train_df$y
#                      , nfolds = 5, family = "binomial", type.measure = "auc")
set.seed(2)
cv.lasso <-cv.glmnet(as.matrix(bank_train_df[,-ncol(bank_train_res)]), bank_train_df$y
, nfolds = 5, family = "binomial", type.measure = "class")
plot(cv.lasso, ylim=c(0.23, 0.27))
col_lasso = rownames(coef(cv.lasso))[which(coef(cv.lasso)!=0)][-1]
length(col_lasso)
col_lasso = append(col_lasso, "y")
# fit a new LR model
lr_lasso <- glm(y ~ ., data = bank_train_df[,col_lasso], family = "binomial")
prob_test <- predict(lr_lasso, newdata = bank_test[,col_lasso], type = "response")
perf(prob_test, bank_test$y)
set.seed(1)
cv.poly <-cv.glmnet(y ~ .
+ I(age^2)
+ I(campaign^2)
+ I(pdays^2)
+ I(previous^2)
+ I(emp.var.rate^2)
+ I(cons.price.idx^2)
+ I(cons.conf.idx^2)
+ I(euribor3m^2)
+ I(nr.employed^2)
, data = bank_train_df, nfolds = 5
,family = "binomial", type.measure = "class")
plot(cv.poly, ylim=c(0.24, 0.26))
col_poly_lasso = rownames(coef(cv.poly))[which(coef(cv.poly)!=0)][-1]
length(col_poly_lasso)
( formula = paste("y~", paste(col_poly_lasso, collapse = "+") ) )
lr_poly_lasso <- glm(formula, data = bank_train_df, family = "binomial")
prob_test <- predict(lr_poly_lasso, newdata = bank_test, type = "response")
perf(prob_test, bank_test$y, col="red")
# Final Model ############################################################
C = summary(lr_poly_lasso)$coefficient
C
summary(lr_poly_lasso)
bank_train_df$age
scale
center
summary(lr_poly_lasso)
length(lr_lasso$coefficients)
lr_lasso$coefficients
length(lr_lasso$coefficients)-1
